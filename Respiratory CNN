{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"pygments_lexer":"ipython3","nbconvert_exporter":"python","version":"3.6.4","file_extension":".py","codemirror_mode":{"name":"ipython","version":3},"name":"python","mimetype":"text/x-python"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":267422,"sourceType":"datasetVersion","datasetId":110374},{"sourceId":5829288,"sourceType":"datasetVersion","datasetId":3350462}],"dockerImageVersionId":30302,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import os\n\nimport wave\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport tensorflow as tf\nimport matplotlib.pyplot as plt\n\nfrom IPython.display import Audio\n\nimport librosa\nimport librosa.display\n\nfrom keras.utils import np_utils\nfrom keras.layers.merge import concatenate\nfrom tensorflow.keras.models import Sequential, Model, load_model\n\nfrom tensorflow.keras.layers import Conv1D, Conv2D, SeparableConv1D, MaxPooling1D, MaxPooling2D\nfrom tensorflow.keras.layers import Input, add, Flatten, Dense, BatchNormalization, Dropout, LSTM, GRU\nfrom tensorflow.keras.layers import GlobalMaxPooling1D, GlobalMaxPooling2D, Activation, LeakyReLU, ReLU\n\n# from tensorflow.keras.layers import Embedding,LSTM,GRU,Dense,MaxPooling1D,Dropout, Input\n# from tensorflow.keras.layers import LeakyReLU,ReLU,Flatten,concatenate,Bidirectional,TimeDistributed \n# from tensorflow.keras.layers import add,Conv1D,SeparableConv1D, GlobalMaxPooling2D,GlobalMaxPooling1D\n# from tensorflow.keras.layers import Conv2D,Input,Activation,BatchNormalization,MaxPooling2D\n\nfrom tensorflow.keras import regularizers\nfrom tensorflow.keras import backend as K\nfrom tensorflow.keras.optimizers import Adamax\nfrom tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score,matthews_corrcoef\nfrom sklearn.metrics import cohen_kappa_score,roc_auc_score,confusion_matrix,classification_report","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:39:20.763019Z","iopub.execute_input":"2023-06-02T05:39:20.763379Z","iopub.status.idle":"2023-06-02T05:39:29.218259Z","shell.execute_reply.started":"2023-06-02T05:39:20.763302Z","shell.execute_reply":"2023-06-02T05:39:29.217055Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"audio_data = '/kaggle/input/respiratory-sound-database/Respiratory_Sound_Database/Respiratory_Sound_Database/audio_and_txt_files/'","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:39:29.220904Z","iopub.execute_input":"2023-06-02T05:39:29.222141Z","iopub.status.idle":"2023-06-02T05:39:29.231332Z","shell.execute_reply.started":"2023-06-02T05:39:29.222101Z","shell.execute_reply":"2023-06-02T05:39:29.229546Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"patient_data=pd.read_csv('/kaggle/input/respiratory-sound-database/Respiratory_Sound_Database/Respiratory_Sound_Database/patient_diagnosis.csv',names=['pid','disease'])","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:39:29.232635Z","iopub.execute_input":"2023-06-02T05:39:29.233257Z","iopub.status.idle":"2023-06-02T05:39:29.256104Z","shell.execute_reply.started":"2023-06-02T05:39:29.233203Z","shell.execute_reply":"2023-06-02T05:39:29.255255Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"diagnosis_df = pd.read_csv('../input/respiratory-sound-database/Respiratory_Sound_Database/Respiratory_Sound_Database/patient_diagnosis.csv', names=['patient_id', 'disease'])\ndiagnosis_df.head(4)","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:39:29.258808Z","iopub.execute_input":"2023-06-02T05:39:29.259169Z","iopub.status.idle":"2023-06-02T05:39:29.278795Z","shell.execute_reply.started":"2023-06-02T05:39:29.259133Z","shell.execute_reply":"2023-06-02T05:39:29.277721Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print (diagnosis_df.disease.value_counts())\nprint ('')\nprint (diagnosis_df.disease.value_counts(normalize=True) *100)","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:39:29.280326Z","iopub.execute_input":"2023-06-02T05:39:29.280741Z","iopub.status.idle":"2023-06-02T05:39:29.295896Z","shell.execute_reply.started":"2023-06-02T05:39:29.280706Z","shell.execute_reply":"2023-06-02T05:39:29.294795Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"sns.countplot(diagnosis_df.disease)\nplt.grid(axis = 'y',color = 'green', linestyle = '--', linewidth = 0.5)\nplt.xticks(rotation=90)","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:39:29.297539Z","iopub.execute_input":"2023-06-02T05:39:29.298149Z","iopub.status.idle":"2023-06-02T05:39:29.573078Z","shell.execute_reply.started":"2023-06-02T05:39:29.29811Z","shell.execute_reply":"2023-06-02T05:39:29.571943Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"path='/kaggle/input/respiratory-sound-database/Respiratory_Sound_Database/Respiratory_Sound_Database/audio_and_txt_files/'\nfiles=[s.split('.')[0] for s in os.listdir(path) if '.txt' in s]","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:39:29.575281Z","iopub.execute_input":"2023-06-02T05:39:29.575897Z","iopub.status.idle":"2023-06-02T05:39:29.807389Z","shell.execute_reply.started":"2023-06-02T05:39:29.575857Z","shell.execute_reply":"2023-06-02T05:39:29.806319Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"files[:10]","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:39:29.808867Z","iopub.execute_input":"2023-06-02T05:39:29.809259Z","iopub.status.idle":"2023-06-02T05:39:29.816699Z","shell.execute_reply.started":"2023-06-02T05:39:29.809199Z","shell.execute_reply":"2023-06-02T05:39:29.815236Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def add_noise(data,x):\n    noise = np.random.randn(len(data))\n    data_noise = data + x * noise\n    return data_noise\n\ndef shift(data,x):\n    return np.roll(data, x)\n\ndef stretch(data, rate):\n    data = librosa.effects.time_stretch(data, rate)\n    return data\n\ndef pitch_shift (data , rate):\n    data = librosa.effects.pitch_shift(data, sr=220250, n_steps=rate)\n    return data","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:39:29.818757Z","iopub.execute_input":"2023-06-02T05:39:29.819331Z","iopub.status.idle":"2023-06-02T05:39:29.828448Z","shell.execute_reply.started":"2023-06-02T05:39:29.819291Z","shell.execute_reply":"2023-06-02T05:39:29.827252Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def show_audio(audio_path):\n    y, sr = librosa.load(audio_path)\n    y_noise = add_noise(y , 0.0008)\n    y_shift = shift(y,3200)\n    y_stretch_1 = stretch(y, 1.2)\n    y_stretch_2 = stretch(y, 0.8)\n    y_pitch_shift = pitch_shift(y, 3)\n    \n    plt.figure(figsize=(20, 8))\n    \n    plt.subplot(3,2,1)\n    librosa.display.waveshow(y, sr=sr)\n    plt.title('orginal')\n\n    plt.subplot(3,2,2)\n    librosa.display.waveshow(y_noise, sr=sr)\n    plt.title('noise')\n\n    plt.subplot(3,2,3)\n    librosa.display.waveshow(y_shift, sr=sr)\n    plt.title('shift')\n    \n    plt.subplot(3,2,4)\n    librosa.display.waveshow(y_stretch_1, sr=sr)\n    plt.title('stretch 1')\n    \n    plt.subplot(3,2,5)\n    librosa.display.waveshow(y_stretch_2, sr=sr)\n    plt.title('stretch 2')\n    \n    plt.subplot(3,2,6)\n    librosa.display.waveshow(y_pitch_shift, sr=sr)\n    plt.title('pitch shift')\n\n    plt.tight_layout()","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:39:29.834017Z","iopub.execute_input":"2023-06-02T05:39:29.83467Z","iopub.status.idle":"2023-06-02T05:39:29.84562Z","shell.execute_reply.started":"2023-06-02T05:39:29.834631Z","shell.execute_reply":"2023-06-02T05:39:29.844697Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def show_audio_features(audio_path):\n    y, sr = librosa.load(audio_path)\n    y_noise = add_noise(y , 0.0008)\n    y_shift = shift(y,3200)\n    y_stretch_1 = stretch(y, 1.2)\n    y_stretch_2 = stretch(y, 0.8)\n    y_pitch_shift = pitch_shift(y, 3)\n    \n    y = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=50)\n    y_noise = librosa.feature.mfcc(y=y_noise, sr=sr, n_mfcc=50)\n    y_shift = librosa.feature.mfcc(y=y_shift, sr=sr, n_mfcc=50)\n    y_stretch_1 = librosa.feature.mfcc(y=y_stretch_1, sr=sr, n_mfcc=50)\n    y_stretch_2 = librosa.feature.mfcc(y=y_stretch_2, sr=sr, n_mfcc=50)\n    y_pitch_shift = librosa.feature.mfcc(y=y_pitch_shift, sr=sr, n_mfcc=50)\n    \n    plt.figure(figsize=(20, 8))\n    \n    plt.subplot(3,2,1)\n    librosa.display.specshow(librosa.power_to_db(y,ref=np.max),\n                             y_axis='mel',\n                             fmax=8000,\n                             x_axis='time')\n    plt.colorbar(format='%+2.0f dB')\n    plt.title('orginal')\n\n    plt.subplot(3,2,2)\n    librosa.display.specshow(librosa.power_to_db(y_noise,ref=np.max),\n                             y_axis='mel',\n                             fmax=8000,\n                             x_axis='time')\n    plt.colorbar(format='%+2.0f dB')\n    plt.title('noise')\n\n    plt.subplot(3,2,3)\n    librosa.display.specshow(librosa.power_to_db(y_shift,ref=np.max),\n                             y_axis='mel',\n                             fmax=8000,\n                             x_axis='time')\n    plt.colorbar(format='%+2.0f dB')\n    plt.title('shift')\n    \n    plt.subplot(3,2,4)\n    librosa.display.specshow(librosa.power_to_db(y_stretch_1,ref=np.max),\n                             y_axis='mel',\n                             fmax=8000,\n                             x_axis='time')\n    plt.colorbar(format='%+2.0f dB')\n    plt.title('stretch 1')\n    \n    plt.subplot(3,2,5)\n    librosa.display.specshow(librosa.power_to_db(y_stretch_2,ref=np.max),\n                             y_axis='mel',\n                             fmax=8000,\n                             x_axis='time')\n    plt.colorbar(format='%+2.0f dB')\n    plt.title('stretch 2')\n    \n    plt.subplot(3,2,6)\n    librosa.display.specshow(librosa.power_to_db(y_pitch_shift,ref=np.max),\n                             y_axis='mel',\n                             fmax=8000,\n                             x_axis='time')\n    plt.colorbar(format='%+2.0f dB')\n    plt.title('pitch shift')\n    \n    \n\n    plt.tight_layout()","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:39:29.849307Z","iopub.execute_input":"2023-06-02T05:39:29.849661Z","iopub.status.idle":"2023-06-02T05:39:29.868435Z","shell.execute_reply.started":"2023-06-02T05:39:29.849633Z","shell.execute_reply":"2023-06-02T05:39:29.867421Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"show_audio('/kaggle/input/respiratory-sound-database/Respiratory_Sound_Database/Respiratory_Sound_Database/audio_and_txt_files/104_1b1_Lr_sc_Litt3200.wav')","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:39:29.869779Z","iopub.execute_input":"2023-06-02T05:39:29.8703Z","iopub.status.idle":"2023-06-02T05:39:36.474677Z","shell.execute_reply.started":"2023-06-02T05:39:29.870257Z","shell.execute_reply":"2023-06-02T05:39:36.473613Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"show_audio_features('/kaggle/input/respiratory-sound-database/Respiratory_Sound_Database/Respiratory_Sound_Database/audio_and_txt_files/104_1b1_Lr_sc_Litt3200.wav')","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:39:36.475884Z","iopub.execute_input":"2023-06-02T05:39:36.476296Z","iopub.status.idle":"2023-06-02T05:39:39.446142Z","shell.execute_reply.started":"2023-06-02T05:39:36.476253Z","shell.execute_reply":"2023-06-02T05:39:39.445261Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def mfccs_feature_exteraction(dir_):\n    '''\n        Extract MFCC feature from the Sound data from the audio data. \n        Augmentation of sound data by adding Noise, streaching and shifting.\n        50 features are extracted from each audio data and used to train the model. \n        Also, we remove .wav files with patient_id 103,108, and 115 to solve data imbalance, because they have unique lables. \n        \n        Args: dir_: Input directory to the Sound input file.\n        \n        Returns:\n            X_data: Array of features extracted from the sound file.\n            y_data: Array of target Labels.\n    '''\n    X_=[]\n    y_=[]\n    \n    COPD=[]\n    copd_count=0\n    \n    data = diagnosis_df\n    features = 52\n    \n    for soundDir in (os.listdir(dir_)):\n        if soundDir[-3:]=='wav'and soundDir[:3]!='103'and soundDir[:3]!='108'and soundDir[:3]!='115':\n\n            p = list(data[data['patient_id']==int(soundDir[:3])]['disease'])[0]\n            if (p=='COPD'):\n                if (soundDir[:6] in COPD) and copd_count<2:\n                    data_x, sampling_rate = librosa.load(dir_+soundDir,res_type='kaiser_fast')\n                    mfccs = np.mean(librosa.feature.mfcc(y=data_x, sr=sampling_rate, n_mfcc=features).T,axis=0)\n                    COPD.append(soundDir[:6])\n                    copd_count+=1\n                    X_.append(mfccs)\n                    y_.append(list(data[data['patient_id']==int(soundDir[:3])]['disease'])[0])\n                    \n                if (soundDir[:6] not in COPD):\n                    data_x, sampling_rate = librosa.load(dir_+soundDir,res_type='kaiser_fast')\n                    mfccs = np.mean(librosa.feature.mfcc(y=data_x, sr=sampling_rate, n_mfcc=features).T,axis=0)\n                    COPD.append(soundDir[:6])\n                    copd_count=0\n                    X_.append(mfccs)\n                    y_.append(list(data[data['patient_id']==int(soundDir[:3])]['disease'])[0])\n                \n            if (p!='COPD'):\n                if ((p == 'Bronchiectasis') or (p == 'Bronchiolitis')):\n                    data_x, sampling_rate = librosa.load(dir_+soundDir,res_type='kaiser_fast')\n                    mfccs = np.mean(librosa.feature.mfcc(y=data_x, sr=sampling_rate, n_mfcc=features).T,axis=0)\n                    X_.append(mfccs)\n                    y_.append('Bronchiolitis')\n            \n                    data_noise = add_noise(data_x,0.001)\n                    mfccs_noise = np.mean(librosa.feature.mfcc(y=data_noise, sr=sampling_rate, n_mfcc=features).T,axis=0)\n                    X_.append(mfccs_noise)\n                    y_.append('Bronchiolitis')\n\n                    data_shift = shift(data_x,1600)\n                    mfccs_shift = np.mean(librosa.feature.mfcc(y=data_shift, sr=sampling_rate, n_mfcc=features).T,axis=0)\n                    X_.append(mfccs_shift)\n                    y_.append('Bronchiolitis')\n                    \n                    data_stretch = stretch(data_x,1.2)\n                    mfccs_stretch = np.mean(librosa.feature.mfcc(y=data_stretch, sr=sampling_rate, n_mfcc=features).T,axis=0)\n                    X_.append(mfccs_stretch)\n                    y_.append('Bronchiolitis')\n                    \n                    data_stretch_2 = stretch(data_x,0.8)\n                    mfccs_stretch_2 = np.mean(librosa.feature.mfcc(y=data_stretch_2, sr=sampling_rate, n_mfcc=features).T,axis=0)\n                    X_.append(mfccs_stretch_2)\n                    y_.append('Bronchiolitis')\n                    \n                    data_pitch_shift = pitch_shift(data_x,3)\n                    mfccs_stretch = np.mean(librosa.feature.melspectrogram(y=data_pitch_shift, sr=sampling_rate, n_mels=features).T,axis=0)\n                    X_.append(mfccs_stretch)\n                    y_.append('Bronchiolitis')\n                    \n                else: \n                    data_x, sampling_rate = librosa.load(dir_+soundDir,res_type='kaiser_fast')\n                    mfccs = np.mean(librosa.feature.mfcc(y=data_x, sr=sampling_rate, n_mfcc=features).T,axis=0)\n                    X_.append(mfccs)\n                    y_.append(list(data[data['patient_id']==int(soundDir[:3])]['disease'])[0])\n            \n                    data_noise = add_noise(data_x,0.001)\n                    mfccs_noise = np.mean(librosa.feature.mfcc(y=data_noise, sr=sampling_rate, n_mfcc=features).T,axis=0)\n                    X_.append(mfccs_noise)\n                    y_.append(p)\n\n                    data_shift = shift(data_x,1600)\n                    mfccs_shift = np.mean(librosa.feature.mfcc(y=data_shift, sr=sampling_rate, n_mfcc=features).T,axis=0)\n                    X_.append(mfccs_shift)\n                    y_.append(p)\n                    \n                    data_stretch = stretch(data_x,1.2)\n                    mfccs_stretch = np.mean(librosa.feature.mfcc(y=data_stretch, sr=sampling_rate, n_mfcc=features).T,axis=0)\n                    X_.append(mfccs_stretch)\n                    y_.append(p)\n                    \n                    data_stretch_2 = stretch(data_x,0.8)\n                    mfccs_stretch_2 = np.mean(librosa.feature.mfcc(y=data_stretch_2, sr=sampling_rate, n_mfcc=features).T,axis=0)\n                    X_.append(mfccs_stretch_2)\n                    y_.append(p)\n                    \n                    data_pitch_shift = pitch_shift(data_x,3)\n                    mfccs_stretch = np.mean(librosa.feature.melspectrogram(y=data_pitch_shift, sr=sampling_rate, n_mels=features).T,axis=0)\n                    X_.append(mfccs_stretch)\n                    y_.append(p)\n                    \n                    \n                \n    X_data = np.array(X_)\n    y_data = np.array(y_)\n\n    \n    return X_data, y_data ","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:39:39.447752Z","iopub.execute_input":"2023-06-02T05:39:39.448354Z","iopub.status.idle":"2023-06-02T05:39:39.482493Z","shell.execute_reply.started":"2023-06-02T05:39:39.448309Z","shell.execute_reply":"2023-06-02T05:39:39.481493Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_mfccs, y = mfccs_feature_exteraction(audio_data)","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:39:39.484111Z","iopub.execute_input":"2023-06-02T05:39:39.484489Z","iopub.status.idle":"2023-06-02T05:44:33.573168Z","shell.execute_reply.started":"2023-06-02T05:39:39.484448Z","shell.execute_reply":"2023-06-02T05:44:33.571519Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def augmented_lables_count(lables):\n    unique, counts = np.unique(lables, return_counts=True)\n    data_count = dict(zip(unique, counts))\n\n    data = data_count\n\n    courses = list(data.keys())\n    values = list(data.values())\n\n    fig = plt.figure(figsize = (10, 5))\n\n    # creating the bar plot\n    plt.bar(courses, values, color =['orange','green','blue','red','yellow','black'],\n            width = 0.4)\n\n    plt.xlabel(\"Diseases\")\n    plt.ylabel(\"Count\")\n    plt.title(\"Count of each disease\")\n    plt.show()\n\n    print (data_count)","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:44:33.574817Z","iopub.execute_input":"2023-06-02T05:44:33.575182Z","iopub.status.idle":"2023-06-02T05:44:33.58953Z","shell.execute_reply.started":"2023-06-02T05:44:33.575144Z","shell.execute_reply":"2023-06-02T05:44:33.587617Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"augmented_lables_count(y)","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:44:33.591087Z","iopub.execute_input":"2023-06-02T05:44:33.591729Z","iopub.status.idle":"2023-06-02T05:44:33.804889Z","shell.execute_reply.started":"2023-06-02T05:44:33.591666Z","shell.execute_reply":"2023-06-02T05:44:33.803536Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"y_data_encode = y.reshape(y.shape[0],1)\ny_data_encode = np.where(y_data_encode == 'COPD',np.array([1,0,0,0,0]).reshape(1,5) , y_data_encode)\ny_data_encode = np.where(y_data_encode == 'Bronchiolitis',np.array([0,1,0,0,0]).reshape(1,5) , y_data_encode)\ny_data_encode = np.where(y_data_encode == 'Pneumonia',np.array([0,0,1,0,0]).reshape(1,5) , y_data_encode)\ny_data_encode = np.where(y_data_encode == 'URTI',np.array([0,0,0,1,0]).reshape(1,5) , y_data_encode)\ny_data_encode = np.where(y_data_encode == 'Healthy',np.array([0,0,0,0,1]).reshape(1,5) , y_data_encode)\n\nY_data = y_data_encode.astype('float64')","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:44:33.807067Z","iopub.execute_input":"2023-06-02T05:44:33.808137Z","iopub.status.idle":"2023-06-02T05:44:33.836259Z","shell.execute_reply.started":"2023-06-02T05:44:33.808098Z","shell.execute_reply":"2023-06-02T05:44:33.835259Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"mfccs_features = np.array(x_mfccs)\nlables = np.array(Y_data)\n\nmfccs_features.shape , lables.shape","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:44:33.837818Z","iopub.execute_input":"2023-06-02T05:44:33.838701Z","iopub.status.idle":"2023-06-02T05:44:33.848939Z","shell.execute_reply.started":"2023-06-02T05:44:33.838659Z","shell.execute_reply":"2023-06-02T05:44:33.847742Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"mfcc_train, mfcc_val, lables_train, lables_val  = train_test_split(mfccs_features, lables, test_size=0.175, random_state=10)\nmfcc_train, mfcc_test, lables_train, lables_test = train_test_split(mfcc_train, lables_train, test_size=0.075, random_state=10)\n\nprint (mfcc_train.shape, mfcc_val.shape, mfcc_test.shape)\nprint (lables_train.shape, lables_val.shape, lables_test.shape)","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:44:33.850562Z","iopub.execute_input":"2023-06-02T05:44:33.851006Z","iopub.status.idle":"2023-06-02T05:44:33.861608Z","shell.execute_reply.started":"2023-06-02T05:44:33.850969Z","shell.execute_reply":"2023-06-02T05:44:33.860485Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def plot_loss_curves(history):\n  \"\"\"\n  Returns separate loss curves for training and validation metrics.\n  Args:\n    history: TensorFlow model History object (see: https://www.tensorflow.org/api_docs/python/tf/keras/callbacks/History)\n  \"\"\" \n  loss = history.history['loss']\n  val_loss = history.history['val_loss']\n\n  accuracy = history.history['accuracy']\n  val_accuracy = history.history['val_accuracy']\n\n  epochs = range(len(history.history['loss']))\n\n  # Plot loss\n#   plt.plot(epochs, loss, label='training_loss')\n#   plt.plot(epochs, val_loss, label='val_loss')\n#   plt.title('Loss')\n#   plt.xlabel('Epochs')\n#   plt.legend()\n#   plt.grid()\n\n\n  # Plot accuracy\n  plt.figure()\n  plt.grid()\n  plt.plot(epochs, accuracy, label='training_accuracy')\n  plt.plot(epochs, val_accuracy, label='val_accuracy')\n  plt.title('Accuracy')\n  plt.xlabel('Epochs')\n  plt.legend();\n","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:44:33.863522Z","iopub.execute_input":"2023-06-02T05:44:33.864348Z","iopub.status.idle":"2023-06-02T05:44:33.874248Z","shell.execute_reply.started":"2023-06-02T05:44:33.864308Z","shell.execute_reply":"2023-06-02T05:44:33.873119Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x_train_gru = np.expand_dims(mfcc_train,axis=1)\nx_val_gru = np.expand_dims(mfcc_val,axis=1)\nx_test_gru = np.expand_dims(mfcc_test,axis=1)\n\ny_train_gru = np.expand_dims(lables_train,axis=1)\ny_val_gru = np.expand_dims(lables_val,axis=1)\ny_test_gru = np.expand_dims(lables_test,axis=1)","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:44:33.875665Z","iopub.execute_input":"2023-06-02T05:44:33.87612Z","iopub.status.idle":"2023-06-02T05:44:33.891576Z","shell.execute_reply.started":"2023-06-02T05:44:33.876084Z","shell.execute_reply":"2023-06-02T05:44:33.89005Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"Input_Sample = Input(shape=(1,52))\n\nmodel_conv = Conv1D(256, kernel_size=5, strides=1, padding='same', activation='relu')(Input_Sample)\nmodel_conv = MaxPooling1D(pool_size=2, strides = 2, padding = 'same')(model_conv)\nmodel_conv = BatchNormalization()(model_conv)\n\nmodel_conv = Conv1D(512, kernel_size=5, strides=1, padding='same', activation='relu')(model_conv)\nmodel_conv = MaxPooling1D(pool_size=2, strides = 2, padding = 'same')(model_conv)\nmodel_conv = BatchNormalization()(model_conv)\n\nmodel_2_1 = GRU(32,return_sequences=True,activation='tanh',go_backwards=True)(model_conv)\nmodel_2 = GRU(128,return_sequences=True, activation='tanh',go_backwards=True)(model_2_1)\n\nmodel_3 = GRU(64,return_sequences=True,activation='tanh',go_backwards=True)(model_conv)\nmodel_3 = GRU(128,return_sequences=True, activation='tanh',go_backwards=True)(model_3)\n\nmodel_x = GRU(64,return_sequences=True,activation='tanh',go_backwards=True)(model_conv)\nmodel_x = GRU(128,return_sequences=True, activation='tanh',go_backwards=True)(model_x)\n\nmodel_add_1 = add([model_3,model_2,model_x])\n\nmodel_5 = GRU(128,return_sequences=True,activation='tanh',go_backwards=True)(model_add_1)\nmodel_5 = GRU(32,return_sequences=True, activation='tanh',go_backwards=True)(model_5)\n\nmodel_6 = GRU(64,return_sequences=True,activation='tanh',go_backwards=True)(model_add_1)\nmodel_6 = GRU(32,return_sequences=True, activation='tanh',go_backwards=True)(model_6)\n\nmodel_add_2 = add([model_5,model_6,model_2_1])\n\n\nmodel_7 = Dense(32, activation=None)(model_add_2)\nmodel_7 = LeakyReLU()(model_7)\nmodel_7 = Dense(128, activation=None)(model_7)\nmodel_7 = LeakyReLU()(model_7)\n\nmodel_9 = Dense(64, activation=None)(model_add_2)\nmodel_9 = LeakyReLU()(model_9)\nmodel_9 = Dense(128, activation=None)(model_9)\nmodel_9 = LeakyReLU()(model_9)\n\nmodel_add_3 = add([model_7,model_9])\n\nmodel_10 = Dense(64, activation=None)(model_add_3)\nmodel_10 = LeakyReLU()(model_10)\n\nmodel_10 = Dense(32, activation=None)(model_10)\nmodel_10 = LeakyReLU()(model_10)\n\nmodel_10 = Dense(5, activation=\"softmax\")(model_10)\n\ngru_model = Model(inputs=Input_Sample, outputs = model_10)\n\ngru_model.summary()","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:44:33.893476Z","iopub.execute_input":"2023-06-02T05:44:33.894426Z","iopub.status.idle":"2023-06-02T05:44:38.899294Z","shell.execute_reply.started":"2023-06-02T05:44:33.894382Z","shell.execute_reply":"2023-06-02T05:44:38.898281Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"tf.keras.utils.plot_model(gru_model, \"gru_model.png\", show_shapes=True)","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:44:38.900688Z","iopub.execute_input":"2023-06-02T05:44:38.901808Z","iopub.status.idle":"2023-06-02T05:44:40.002706Z","shell.execute_reply.started":"2023-06-02T05:44:38.901768Z","shell.execute_reply":"2023-06-02T05:44:40.001502Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"optimiser = tf.keras.optimizers.Adam(learning_rate = 0.0001)\ngru_model.compile(optimizer=optimiser, loss='categorical_crossentropy',metrics=['accuracy'])\n\ncb = [EarlyStopping(patience=300,monitor='accuracy',mode='max',restore_best_weights=True),\n      ModelCheckpoint(\"/kaggle/working/diagnosis_GRU_CNN_1.h5\",save_best_only=True)]","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:44:40.004529Z","iopub.execute_input":"2023-06-02T05:44:40.005364Z","iopub.status.idle":"2023-06-02T05:44:40.027675Z","shell.execute_reply.started":"2023-06-02T05:44:40.005319Z","shell.execute_reply":"2023-06-02T05:44:40.026693Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"history = gru_model.fit(x_train_gru, y_train_gru, batch_size=8, epochs=50, validation_data=(x_val_gru, y_val_gru), callbacks = cb)","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:44:40.029012Z","iopub.execute_input":"2023-06-02T05:44:40.029743Z","iopub.status.idle":"2023-06-02T05:46:24.411428Z","shell.execute_reply.started":"2023-06-02T05:44:40.029712Z","shell.execute_reply":"2023-06-02T05:46:24.410361Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"gru_model.evaluate(x_train_gru, y_train_gru)\n\nplot_loss_curves(history)","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:46:24.413339Z","iopub.execute_input":"2023-06-02T05:46:24.413716Z","iopub.status.idle":"2023-06-02T05:46:28.105417Z","shell.execute_reply.started":"2023-06-02T05:46:24.413678Z","shell.execute_reply":"2023-06-02T05:46:28.10445Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"classes = [\"COPD\" ,\"Bronchiolitis \", \"Pneumoina\", \"URTI\", \"Healthy\"]\n\npreds = gru_model.predict(x_test_gru)\nclasspreds = [np.argmax(t) for t in preds ]\ny_testclass = [np.argmax(t) for t in y_test_gru]\ncm = confusion_matrix(y_testclass, classpreds)\n\nplt.figure(figsize=(8, 6), dpi=80, facecolor='w', edgecolor='k')\nax = sns.heatmap(cm, cmap='Blues', annot=True, fmt='d', xticklabels=classes, yticklabels=classes)\n\nplt.title('')\nplt.xlabel('Prediction')\nplt.ylabel('Truth')\nplt.show(ax)","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:46:28.111053Z","iopub.execute_input":"2023-06-02T05:46:28.111872Z","iopub.status.idle":"2023-06-02T05:46:30.975234Z","shell.execute_reply.started":"2023-06-02T05:46:28.111833Z","shell.execute_reply":"2023-06-02T05:46:30.974176Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(classification_report(y_testclass, classpreds, target_names=classes))","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:46:30.976805Z","iopub.execute_input":"2023-06-02T05:46:30.977161Z","iopub.status.idle":"2023-06-02T05:46:30.990597Z","shell.execute_reply.started":"2023-06-02T05:46:30.977124Z","shell.execute_reply":"2023-06-02T05:46:30.988594Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def gru_diagnosis_prediction(test_audio):\n    data_x, sampling_rate = librosa.load(test_audio)\n    data_x = stretch (data_x,1.2)\n\n    features = np.mean(librosa.feature.mfcc(y=data_x, sr=sampling_rate, n_mfcc=52).T,axis = 0)\n\n    features = features.reshape(1,52)\n\n    test_pred = gru_model.predict(np.expand_dims(features, axis = 1))\n    classpreds = classes[np.argmax(test_pred[0], axis=1)[0]]\n    confidence = test_pred.T[test_pred[0].mean(axis=0).argmax()].mean()\n\n    print (classpreds , confidence)","metadata":{"execution":{"iopub.status.busy":"2023-06-02T05:46:30.992101Z","iopub.execute_input":"2023-06-02T05:46:30.992745Z","iopub.status.idle":"2023-06-02T05:46:31.001093Z","shell.execute_reply.started":"2023-06-02T05:46:30.992707Z","shell.execute_reply":"2023-06-02T05:46:31.000417Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"val=[]\ndir_= '/kaggle/input/respiratory-test/107_2b5_Ar_mc_AKGC417L.wav'\nfeatures = 52\n\nsoundDir = ''#'/kaggle/input/respiratory-test'\ndata_x, sampling_rate = librosa.load(dir_+soundDir,res_type='kaiser_fast')\nmfccs = np.mean(librosa.feature.mfcc(y=data_x, sr=sampling_rate, n_mfcc=features).T,axis=0)\nval.append(mfccs)\nval = np.expand_dims(val,axis=1)","metadata":{"execution":{"iopub.status.busy":"2023-06-02T06:04:07.918185Z","iopub.execute_input":"2023-06-02T06:04:07.918594Z","iopub.status.idle":"2023-06-02T06:04:08.165731Z","shell.execute_reply.started":"2023-06-02T06:04:07.91856Z","shell.execute_reply":"2023-06-02T06:04:08.164111Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"classes[np.argmax(gru_model.predict(val))]","metadata":{"execution":{"iopub.status.busy":"2023-06-02T06:04:46.845982Z","iopub.execute_input":"2023-06-02T06:04:46.846398Z","iopub.status.idle":"2023-06-02T06:04:46.899388Z","shell.execute_reply.started":"2023-06-02T06:04:46.846362Z","shell.execute_reply":"2023-06-02T06:04:46.898412Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}